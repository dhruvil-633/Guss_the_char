{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Guess the Character – 64 Marvel & DC Heroes\n",
        "\n",
        "Two-stage game:\n",
        "- **Round 1**: 7 binary questions\n",
        "- **Round 2**: 7 more (5 binary + 2 genre)\n",
 tone\n",
        "**Genre = Last 2 Questions**\n",
        "\n",
        "Fixes:\n",
        "- Duplicate rare characters (if any appear once)\n",
        "- No `stratify` → avoids error\n",
        "- `class_weight='balanced'`\n",
        "\n",
        "---"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Install dependencies (run once)\n",
        "# !pip install pandas scikit-learn joblib\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import accuracy_score\n",
        "import joblib\n",
        "import os\n",
        "from collections import Counter\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 1. Load Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Upload your char.csv first (64 rows, 22 columns)\n",
        "df_raw = pd.read_csv(\"char.csv\")\n",
        "\n",
        "print(\"Shape:\", df_raw.shape)\n",
        "print(\"\\nColumns:\")\n",
        "print(df_raw.columns.tolist())\n",
        "print(\"\\nSample:\")\n",
        "df_raw.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 2. Preprocess & Fix Rare Characters"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "# Rename columns\n",
        "df = df_raw.rename(columns={\n",
        "    \"name\": \"character\",\n",
        "    \"male\": \"is_male\",\n",
        "    \"superhero\": \"is_superhero\",\n",
        "    \"detective\": \"is_detective\",\n",
        "    \"comedian\": \"is_comedian\",\n",
        "    \"billionaire\": \"is_billionaire\",\n",
        "    \"from_earth\": \"is_from_earth\",\n",
        "    \"team_member\": \"is_team_member\",\n",
        "    \"sidekick\": \"has_sidekick\"\n",
        "})\n",
        "\n",
        "# One-hot encode genre\n",
        "genre_dummies = pd.get_dummies(df['genre'], prefix='genre')\n",
        "df = pd.concat([df.drop('genre', axis=1), genre_dummies], axis=1)\n",
        "\n",
        "# Fix: Duplicate characters that appear only once\n",
        "char_counts = Counter(df['character'])\n",
        "rare_chars = [c for c, cnt in char_counts.items() if cnt == 1]\n",
        "\n",
        "if rare_chars:\n",
        "    print(f\"Duplicating {len(rare_chars)} rare characters...\")\n",
        "    extra = df[df['character'].isin(rare_chars)].copy()\n",
        "    df = pd.concat([df, extra], ignore_index=True)\n",
        "    print(f\"New shape: {df.shape}\")\n",
        "else:\n",
        "    print(\"All characters appear ≥2 times.\")\n",
        "\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 3. Select Questions via Information Gain"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "binary_cols = [c for c in df.columns if c not in ['character'] + list(genre_dummies.columns)]\n",
        "genre_cols = list(genre_dummies.columns)\n",
        "\n",
        "def entropy(p):\n",
        "    if p <= 0 or p >= 1: return 0.0\n",
        "    return -p * np.log2(p) - (1-p) * np.log2(1-p)\n",
        "\n",
        "def info_gain(col):\n",
        "    p1 = col.mean()\n",
        "    if p1 == 0 or p1 == 1: return 0\n",
        "    H_parent = entropy(p1)\n",
        "    p0 = 1 - p1\n",
        "    H0 = entropy(p0) * p0\n",
        "    H1 = entropy(p1) * p1\n",
        "    return H_parent - (H0 + H1)\n",
        "\n",
        "gains = df[binary_cols].apply(info_gain)\n",
        "top_binary = gains.sort_values(ascending=False).index.tolist()\n",
        "\n",
        "# Round 1: Top 7\n",
        "TOP_7 = top_binary[:7]\n",
        "\n",
        "# Round 2: Top 12 binary + 2 genre\n",
        "TOP_12_BINARY = top_binary[:12]\n",
        "TOP_14 = TOP_12_BINARY + genre_cols[:2]  # Last 2 = genre\n",
        "\n",
        "print(\"TOP 7 QUESTIONS:\")\n",
        "for i, q in enumerate(TOP_7, 1):\n",
        "    print(f\"  {i}. {q}\")\n",
        "\n",
        "print(\"\\nTOP 14 QUESTIONS (last 2 = genre):\")\n",
        "for i, q in enumerate(TOP_14, 1):\n",
        "    print(f\"  {i}. {q}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 4. Prepare Features & Labels"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "X7 = df[TOP_7].values\n",
        "X14 = df[TOP_14].values\n",
        "y = df['character'].values\n",
        "\n",
        "print(f\"X7 shape: {X7.shape}, X14 shape: {X14.shape}, y shape: {y.shape}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 5. Train-Test Split (No Stratify)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "X7_train, X7_val, y7_train, y7_val = train_test_split(X7, y, test_size=0.2, random_state=42)\n",
        "X14_train, X14_val, y14_train, y14_val = train_test_split(X14, y, test_size=0.2, random_state=42)\n",
        "\n",
        "print(f\"Train size: {len(X7_train)}, Val size: {len(X7_val)}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 6. Train Models"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "print(\"Training 7-Q Model...\")\n",
        "model_7 = RandomForestClassifier(\n",
        "    n_estimators=500,\n",
        "    max_depth=12,\n",
        "    random_state=42,\n",
        "    n_jobs=-1,\n",
        "    class_weight='balanced'\n",
        ")\n",
        "model_7.fit(X7_train, y7_train)\n",
        "acc7 = accuracy_score(y7_val, model_7.predict(X7_val))\n",
        "print(f\"7-Q Accuracy: {acc7:.3%}\")\n",
        "\n",
        "print(\"\\nTraining 14-Q Model...\")\n",
        "model_14 = RandomForestClassifier(\n",
        "    n_estimators=800,\n",
        "    max_depth=16,\n",
        "    random_state=42,\n",
        "    n_jobs=-1,\n",
        "    class_weight='balanced'\n",
        ")\n",
        "model_14.fit(X14_train, y14_train)\n",
        "acc14 = accuracy_score(y14_val, model_14.predict(X14_val))\n",
        "print(f\"14-Q Accuracy: {acc14:.3%}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 7. Save Models & Questions"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "SAVE_DIR = \"guess_game_models\"\n",
        "os.makedirs(SAVE_DIR, exist_ok=True)\n",
        "\n",
        "joblib.dump(model_7, f\"{SAVE_DIR}/model_7.pkl\")\n",
        "joblib.dump(model_14, f\"{SAVE_DIR}/model_14.pkl\")\n",
        "joblib.dump(TOP_7, f\"{SAVE_DIR}/questions_7.pkl\")\n",
        "joblib.dump(TOP_14, f\"{SAVE_DIR}/questions_14.pkl\")\n",
        "joblib.dump(df['character'].tolist(), f\"{SAVE_DIR}/characters.pkl\")\n",
        "\n",
        "print(f\"All files saved to {SAVE_DIR}/\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 8. Play the Game!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "def ask(q):\n",
        "    while True:\n",
        "        a = input(f\"{q}? (y/n): \").strip().lower()\n",
        "        if a in (\"y\", \"yes\"): return 1\n",
        "        if a in (\"n\", \"no\"): return 0\n",
        "        print(\"Please type y or n\")\n",
        "\n",
        "def play_game():\n",
        "    print(\"\\n\" + \"=\"*60)\n",
        "    print(\"   GUESS THE CHARACTER – 64 HEROES\")\n",
        "    print(\"=\"*60)\n",
        "\n",
        "    # Round 1\n",
        "    ans7 = [ask(q) for q in TOP_7]\n",
        "    guess1 = model_7.predict([ans7])[0]\n",
        "    print(f\"\\nAfter 7 questions → **{guess1}**\")\n",
        "    if input(\"Correct? (y/n): \").lower().startswith('y'):\n",
        "        print(\"I WIN IN 7!\")\n",
        "        return\n",
        "\n",
        "    # Round 2\n",
        "    extra = [ask(q) for q in TOP_14[7:12]]\n",
        "    genre_q = [ask(g.replace(\"genre_\", \"Genre: \")) for g in genre_cols[:2]]\n",
        "    ans14 = ans7 + extra + genre_q\n",
        "\n",
        "    guess2 = model_14.predict([ans14])[0]\n",
        "    print(f\"\\nAfter 14 questions → **{guess2}**\")\n",
        "    print(\"GOT IT!\" if input(\"Correct now? (y/n): \").lower().startswith('y') else \"Better luck next time!\")\n",
        "\n",
        "# Uncomment to play:\n",
        "# play_game()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "## Done! Models trained, saved, and game ready.\n",
        "\n",
        "**Next Step**: Say **`Deploy web app`** → I’ll give you Flask + HTML + Docker."
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.11.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}